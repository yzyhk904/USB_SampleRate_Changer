#!/system/bin/sh
#

MYDIR=${0%/*}

# Forcing to reload audioservers
function reloadAudioServers() 
{
    # wait for system boot completion and audiosever boot up
    local i
    for i in `seq 1 3` ; do
        if [ "`getprop sys.boot_completed`" = "1"  -a  -n "`getprop init.svc.audioserver`" ]; then
            break
        fi
        sleep 1
    done

    if [ -n "`getprop init.svc.audioserver`" ]; then
    
        setprop ctl.restart audioserver
        sleep 0.2
        if [ "`getprop init.svc.audioserver`" != "running" ]; then
            # workaround for Android 12 old devices hanging up the audioserver after "setprop ctl.restart audioserver" is executed
            local pid="`getprop init.svc_debug_pid.audioserver`"
            if [ -n "$pid" ]; then
                kill -HUP $pid 1>"/dev/null" 2>&1
            fi
            for i in `seq 1 10` ; do
                sleep 0.2
                if [ "`getprop init.svc.audioserver`" = "running" ]; then
                    break
                elif [ $i -eq 10 ]; then
                    echo "audioserver reload failed!" 1>&2
                    return 1
                fi
            done
        fi
        
        if [ $# -gt 0  -a  "$1" = "all" ]; then
            local audioHal
            audioHal="$(getprop |sed -nE 's/.*init\.svc\.(.*audio-hal[^]]*).*/\1/p')"
            setprop ctl.restart "$audioHal" 1>"/dev/null" 2>&1
            sleep 0.2
            if [ "`getprop init.svc.${audioHal}`" != "running" ]; then
                kill "`getprop init.svc_debug_pid.${audioHal}`" 1>"/dev/null" 2>&1
            fi
        fi
        
    else
        echo "audioserver is not found!" 1>&2 
        return 1
    fi
    
}

# Find mount points paired with arg2 ("/data/...") in arg1 (typycally "/proc/self/mountinfo"). 
#   arg3 1: show a key with its paired mount point, 0: moun point only.
function findMounts()
{
    if [ $# -ne 3 ]; then
        return 1
    elif [ ! -r "$1"  -o  `expr "$2" : /data` -ne 5 ]; then
        return 1
    fi

    local mf=${2:5}    
    local showKey=0
    case "$3" in
        "true" | "1" )
            showKey=1
            ;;
        "false" | "0" )
            showKey=0
            ;;
    esac
    
    awk -v showKey=$showKey -v mFile="^$mf\$|^$mf//deleted$" '
        BEGIN { 
            status=1
        }
        $4 ~ mFile  && $10 ~ /^\/dev\/block\// {
            if (showKey)
                print $4 " " $5
            else
                print  $5
            status=0
        }
        END {
            exit status 
        }' <"$1"
}

# Find a mount point arg2 in arg1 (typycally "/proc/self/mountinfo"). 
#   arg3 "IncludeMagisk" (including Magisk mount points) or "ExcludeMagisk" (exclude Magisk mount points)
#   arg4 "ShowKey" (print a key with its specified mount point) or "NoShowKey" (don't print the key)
#   If found, then return 0 else return 1
function isMounted()
{
    if [ $# -ne 4 ]; then
        return 1
    elif [ ! -r "$1" ]; then
        return 1
    fi

    local mf="$2"
    local includeMagisk=0
    if [ "$3" = "IncludeMagisk" ]; then
        includeMagisk=1
    fi
    local showKey=0
    if [ "$4" = "ShowKey" ]; then
        showKey=1
    fi

    awk -v showKey=$showKey -v includeMagisk=$includeMagisk -v mFile="^$mf\$" '
        BEGIN {
            status=1
        }
        $5 ~ mFile  && (includeMagisk==1 || ($4 !~ /^\/adb\/modules\// && $4 !~ /^\/data\/adb\/modules\// && $10 ~ /^\/dev\/block\//)) {
            if (showKey)
                print $4 " " $5
            status=0
            exit
        }
        END {
            exit status
        }' <"$1"
}

# Remove somewheres bind mounted with arg1
function removeMountPoints()
{
    if [ $# -eq 1 ]; then
    
        local mDirs="`findMounts \"/proc/self/mountinfo\" \"$1\" 0`"
        if [ -n "$mDirs" ]; then
        
            local i
            for i in $mDirs ; do
                if [ -e "$i" ]; then
                    case "$i" in
                        /data/local/tmp/* )
                            ;;
                        * )
                            umount "$i" 1>"/dev/null" 2>&1
                            ;;
                    esac
                fi
            done
            
        fi
        
    fi
    
    return 0
}
 
# Remove arg1 file probaby bind mounted somewheres
function removeGenFile()
{
    if [ $# -eq 1 ]; then
        removeMountPoints "$1"
        if [ -e "$1" ]; then
            rm -f "$1"
        fi
        # Remove Magisk overlayed files. The above remove may fail.
        removeMountPoints "$1"
        return $?
    fi
    return 1
}

# Get the active audio policy configuration fille from the audioserever
function getActivePolicyFile()
{
    dumpsys media.audio_policy | awk ' 
        /^ Config source: / {
            print $3
        }' 
}
  
# Make a configuration file for this script
function makeConfigFile()
{
    if [ $# -eq 1 ]; then
    
        local policyFile="`getActivePolicyFile`"
        if [ ! -e "$policyFile" ]; then
            policyFile="/vendor/etc/audio_policy_configuration.xml"
        fi
        
        local bltHal
        if [ "`getprop persist.bluetooth.bluetooth_audio_hal.disabled`" = "true" ]; then
        
            case "`getprop ro.board.platform`" in
                sdm* | msm* | sd* )
                    bltHal="legacy"
                    ;;
                * )
                    bltHal="safe"
                    ;;
            esac
            
        elif [ -e "/vendor/lib64/hw/audio.bluetooth.default.so" ]; then
            case "`getprop ro.board.platform`" in
                gs* | zuma )
                    # temporally for Tensor devices
                    bltHal="bypass-safer"
                    ;;
                * )
                    bltHal="bypass-safer"
                    ;;
                esac
        elif [ "`getprop ro.bluetooth.a2dp_offload.supported`" = "true" ]; then
            bltHal="offload"
        else
        
            case "`getprop ro.board.platform`" in
                mt* )
                    bltHal="safe"
                    ;;
                * )
                    bltHal="safest"
                    ;;
            esac
            
        fi
        
        if [ -e "$1" ]; then
            rm -f "$1"
        fi
        
        cat <<_EOT_ > "$1"
PolicyFile="$policyFile"
BluetoothHal="$bltHal"
_EOT_

        return 0
        
    fi
    
    return 1
}
